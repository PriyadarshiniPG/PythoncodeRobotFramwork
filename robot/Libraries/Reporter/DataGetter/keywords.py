"""A module to get necessary date about results of tests execution"""

# pylint: disable=wrong-import-position
# pylint: disable=too-few-public-methods
# pylint: disable=too-many-instance-attributes
# pylint: disable=W0702
import os
import sys
import inspect
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
lib_dir = os.path.dirname(parentdir)
robot_dir = os.path.dirname(lib_dir)
sys.path.append(robot_dir)
sys.path.append(parentdir)
from robot.libraries.BuiltIn import BuiltIn, RobotNotRunningError
try:
    from Libraries.UiCheck.VisualRegressionLib import VisualRegressionLib
except RobotNotRunningError:
    pass
import tools  # pylint: disable=import-error
from Libraries.Jira.keywords import JiraGetter

SUITE_ID = None
RF_TIME_PATTERN = "%Y%m%d %H:%M:%S.%f"
RF_TIME_PATTERN_TESTRUN = "%Y%m%d%H%M%S"


class Data(object):
    """A class to get necessary date about results of tests execution"""

    def __init__(self):
        self.conf = tools.get_conf()
        self.suite = None
        self.test = None

    def get_start_suite_data(self, *args):
        """A method to get start suite data"""
        attrs = args[0][1]
        pabot = tools.str_to_bool(tools.get_var_value("PABOT"))
        id_build = tools.get_var_value("BUILD_NUMBER")
        id_job = tools.get_var_value("JOB_NAME")
        lab = tools.get_lab_name()
        global SUITE_ID  # pylint: disable=global-statement
        if SUITE_ID is None:
            if not pabot:
            # IF Not Pabot we will generate one SUITE_ID and store it
            # on Global SUITE_ID for next iteration
            # If it is a Pabot Run the SUITE ID Should be Provided as argument or it will be
            # AUTO Generated by {lab}-{job}-{build number} or {lab}-LOCALRUN if it is a localrun
                SUITE_ID = tools.generate_id("8-4-4-4")
                SUITE_ID = "%s-%s" % (
                    tools.time_now_str(RF_TIME_PATTERN_TESTRUN), SUITE_ID)
                BuiltIn().log_to_console("SUITE_ID: %s" % SUITE_ID)
                tools.set_suite_var("SUITE_ID", SUITE_ID)
            else:
                SUITE_ID = tools.get_var_value("SUITE_ID")
                if SUITE_ID == "":
                    if id_job != "":
                        SUITE_ID = "%s-%s-%s" % \
                                   (lab, id_job, id_build)
                    else:
                        SUITE_ID = "%s-localrun" % lab
                    BuiltIn().log_to_console("AUTO Generate(Always same) - SUITE_ID: %s" % SUITE_ID)
                else:
                    BuiltIn().log_to_console("Provided - SUITE_ID: %s" % SUITE_ID)
        else:
            BuiltIn().log_to_console("INFO - Suite already started - SUITE_ID: %s" % SUITE_ID)
        run_id = tools.generate_id("8-4-4-4")
        test_run_id = "%s-%s" % (tools.time_now_str(RF_TIME_PATTERN_TESTRUN), run_id)
        BuiltIn().log_to_console("TEST_RUN_ID: %s" % test_run_id)
        tools.set_suite_var("TEST_RUN_ID", test_run_id)
        self.suite = TestSuiteData(SUITE_ID, test_run_id, attrs["longname"])
        self.suite.pabot = pabot
        self.suite.id_build = id_build
        self.suite.id_job = id_job
        self.suite.lab = lab
        if "preprod" in str(self.suite.lab).lower():
            self.suite.environment = "preprod"
        elif "prod" in str(self.suite.lab).lower():
            self.suite.environment = "prod"
        else:
            self.suite.environment = "lab"
        self.suite.tenant = str(self.suite.lab).lower().\
            replace(self.suite.environment, "").replace("_", "").replace("e2esuperset", "superset")
        self.suite.time["start"] = tools.time_ms(attrs["starttime"], RF_TIME_PATTERN)
        # BuiltIn().log_to_console("\nStart Suite args: %s\n" % str(args))
        self.suite.id_pipeline = tools.get_var_value("PIPELINE_ID")
        if self.suite.id_pipeline != "" and self.suite.id_pipeline is not None:
            BuiltIn().log_to_console("PIPELINE_ID: %s" % self.suite.id_pipeline)
            tools.set_suite_var("PIPELINE_ID", self.suite.id_pipeline)
        self.suite.stb_pool = tools.get_var_value("STB_POOL")
        self.suite.id_user = tools.get_var_value("USER_ID")
        self.suite.id_commit = tools.get_var_value("GIT_COMMIT")
        self.suite.id_branch = tools.get_var_value("GIT_BRANCH")
        self.suite.url_build = tools.get_var_value("BUILD_URL")
        if self.suite.url_build != "" and self.suite.url_build is not None:
            # BuiltIn().log_to_console("url_build: %s" % self.suite.url_build)
            self.suite.url_output = self.suite.url_build + "robot/report/output.xml"
            # BuiltIn().log_to_console("suite.url_output: %s" % self.suite.url_output)
            self.suite.url_log = self.suite.url_build + "robot/report/log.html"
            self.suite.url_report = self.suite.url_build + "robot/report/report.html"
            self.suite.url_quickreport = "%sartifact/%s/robot/" \
                                         "execution_artifacts/quickreport.html" \
                                         % (self.suite.url_build, str(self.suite.repository))
            if self.suite.pabot:
                self.suite.url_full_log = "%srobot/report/log.html" % str(self.suite.url_build)
                self.suite.url_log = "%sartifact/%s/robot/pabot_results/" \
                                     "%s/%s" % (str(self.suite.url_build),
                                                str(self.suite.repository),
                                                str(self.suite.original_ts_name)
                                                .replace(" ", "%20"), "stdout.txt")
        self.suite.url_screenshot = tools.get_var_value("URL_SCREENSHOT")
        # BuiltIn().log_to_console("URL_SCREENSHOT: %s" % self.suite.url_screenshot)

    def get_start_test_data(self, *args):
        """A method to get start test data"""
        name = args[0][0]
        attrs = args[0][1]
        self.test = TestCaseData(self.suite, name, tools.get_var_value("TEST_TAGS"))
        self.test.time["start"] = tools.time_ms(attrs["starttime"], RF_TIME_PATTERN)
        self.suite.ts_tags.extend(x for x in self.test.tc_tags if x not in self.suite.ts_tags)
        # If Jira ticket is provide and Defect list is empty [] - I search for JIRA Defects
        if self.suite.jira and not self.suite.jira_data_linked_list:
            self._jira_defects_getter()

    def _jira_defects_getter(self):
        """A method to get the jira defects for the Jira ticket Running"""
        ### START: READING Linked JIRA Data FROM FILE
        try:
            project_name = str(self.suite.jira[0]).split("-")[0]
            ticket_to_search = self.suite.jira[0]
            if not self.suite.jira_data_all_linked:
                BuiltIn().log_to_console("\n*** DEBUG: Reading Linked JIRA Tickets Data File -"
                                         " Only one Time ***")
                self.suite.jira_data_all_linked = \
                    self.suite.jiragetter.get_all_linked_tickets_from_data_file(project_name)
            # BuiltIn().log_to_console("\n*** DEBUG: jira_data_all_linked:\n%s" %
            #                          self.suite.jira_data_all_linked)
            jira_data = {}
            if self.suite.jira_data_all_linked:
                jira_data = \
                    self.suite.jiragetter.get_linked_tickets_dict_for_one_from_all_tickets_info(
                        self.suite.jira_data_all_linked, ticket_to_search)
            # BuiltIn().log_to_console("*** DEBUG: jira_data:\n%s" % jira_data)
            if jira_data and ticket_to_search in jira_data \
                    and "linked" in jira_data[ticket_to_search] \
                    and jira_data[ticket_to_search]["linked"]:
                array_of_linked_tickets = []
                jiraData_linkedList = []
                jira_closed_status = ["closed", "done"]
                for t_link_key, t_link in list(jira_data[ticket_to_search]["linked"].items()):
                    # BuiltIn().log_to_console("*** DEBUG: t_link_key: %s ***" % t_link_key)
                    # BuiltIn().log_to_console("*** DEBUG: t_link: %s\n" % t_link)
                    tenant_and_env_label = "QA_%s_%s" % (self.suite.tenant, self.suite.environment)
                    # WORKAROUND FOR E2ESI_QA_SUPERSET_LAB  TO E2ESI_QA_SUPERSET - REMOVE IT
                    tenant_and_env_label = tenant_and_env_label.replace("_lab", "")
                    BuiltIn().log_to_console("*** INFO: tenant_and_env_label: "
                                             "%s" % tenant_and_env_label.upper())
                    general_env_label = "QA_%s" % self.suite.environment
                    BuiltIn().log_to_console("*** INFO: general_env_label: "
                                             "%s" % general_env_label.upper())
                    if "labels" in t_link and "status" in t_link \
                            and str(t_link["status"]).lower() not in jira_closed_status:
                        for label in t_link["labels"]:
                            if (tenant_and_env_label.lower() in str(label).lower()) \
                                    or (general_env_label.lower() in str(label).lower()):
                                if t_link_key not in jiraData_linkedList:
                                    jiraData_linkedList.append(t_link_key)
                                    array_of_linked_tickets.append(t_link)
                                    if "status" in jira_data[ticket_to_search]:
                                        self.suite.jira_data_status = \
                                            jira_data[ticket_to_search]["status"]
                                    if "priority" in jira_data[ticket_to_search]:
                                        self.suite.jira_data_priority = \
                                            jira_data[ticket_to_search]["priority"]
                    else:
                        BuiltIn().log_to_console(
                            "*** WARN: JIRA: %s - Defect Closed or without labels key on "
                            "t_link: %s ***" % (self.suite.jira[0], t_link))
                if array_of_linked_tickets:  # If it is not empty
                    self.suite.jira_data_linked = array_of_linked_tickets
                    self.suite.jira_data_linked_list = jiraData_linkedList
                    BuiltIn().log_to_console("*** INFO: jiraData_linkedList: "
                                             "%s\n" % jiraData_linkedList)
                else:
                    BuiltIn().log_to_console(
                        "*** DEBUG: JIRA %s - Found on Jira Linked Tickets Data File"
                        " - BUT It do not have the Actual tenant(%s) or env(%s) Labels ***" %
                        (self.suite.jira[0], self.suite.tenant, self.suite.environment))
                    self.suite.jira_data_linked_list = ["None"]
            else:
                BuiltIn().log_to_console(
                    "\n*** INFO: JIRA %s - NOT found on Jira Linked Tickets Data File"
                    " - It maybe not have linked tickets ***\n" % self.suite.jira[0])
                self.suite.jira_data_linked_list = ["None"]
        except Exception as err:  # pylint: disable=broad-except
            BuiltIn().log_to_console(
                "\n*** ERROR: Problem Getting JIRA Data from Linked Tickets "
                "Jira Query File for Jira: %s. Error: %s ***\n" % (self.suite.jira[0], err))
        ### END: READING Linked JIRA Data FROM FILE

    def get_end_test_data(self, *args):
        """A method to get end test data"""
        attrs = args[0][1]
        self.test.result = attrs["status"]
        if attrs["doc"]:
            self.test.description = attrs["doc"]
        else:
            self.test.description = tools.get_var_value("DESCRIPTION") \
                if tools.get_var_value("DESCRIPTION") else ""
        self.test.time["end"] = tools.time_ms(attrs["endtime"], RF_TIME_PATTERN)
        self.test.avgResponseTime = tools.get_var_value("avg_latency")
        self.test.maxResponseTime = tools.get_var_value("max_latency")
        endpoint_tag = tools.get_var_value("ENDPOINT_TAG")
        is_valid_scr_cap_test = False
        is_valid_scr_cap_build = True
        if endpoint_tag:
            self.test.tc_tags.append(endpoint_tag)
        url_path = tools.get_var_value("URL_PATH")
        if url_path:
            self.test.url_path = url_path
        location = tools.get_var_value("LOCATION")
        if location:
            self.test.location = location
        if self.test.result == "FAIL":
            failed_reason = str(tools.get_var_value("failedReason")) \
                            or tools.get_var_value("TEST_MESSAGE")
            self.test.failed_reason = tools.prepare_string_for_json(failed_reason)
            self._update_suite_failed_reason(self.test.failed_reason, self.test.tc_name)
            # Related with string on Keyword: "Skip If Last Fail" of file: basic.robot
            if "skipped: The test case" in self.test.failed_reason:
                self.test.result = "SKIPPED"
            else:
                is_valid_scr_cap_test = True
            roboterror = tools.get_var_value("robotError")
            if roboterror != "" and roboterror is not None:
                self.test.failed_reason_robot = tools.prepare_string_for_json(roboterror)
                self.suite.failed_reason_robot = self.test.failed_reason_robot
                BuiltIn().log_to_console("\nfailedReasonRobot: %s"
                                         % self.test.failed_reason_robot)

            actual_cpe_build = tools.get_robot_or_env_var_value("ACTUAL_CPE_BUILD")
            # BuiltIn().log_to_console("\nactual_cpe_build: %s" % actual_cpe_build)

            if actual_cpe_build is not None and "PRD" in actual_cpe_build.upper():
                is_valid_scr_cap_build = False
        path = "execution_artifacts/test_screenshots/"
        scr_cap_enabled = tools.get_robot_or_env_var_value("CAPTURE_SCREENSHOT")

        # BuiltIn().log_to_console("\nscr_cap_enabled: %s" % scr_cap_enabled)
        curr_test_status = tools.get_robot_or_env_var_value("TEST STATUS")
        # Screenshot will be captured only if the current test status is not None(i.e, value is PASS/FAIL)
        if is_valid_scr_cap_test \
                and is_valid_scr_cap_build \
                and scr_cap_enabled == 'True' \
                and curr_test_status is not None:
            try:
                ss_name = self.suite.jira[0] + '-' + self.test.tc_name + '-' \
                          + tools.get_robot_or_env_var_value("CPE_ID")
                ss_name = ss_name.replace(" ", "_")
                VisualRegressionLib().get_screenshot_via_xap(
                    tools.get_robot_or_env_var_value("STB_IP"),
                    tools.get_robot_or_env_var_value("CPE_ID"),
                    path, ss_name, 400, 320, xap=True,
                    compression_type='none')
                if self.suite.url_build == "":
                    self.suite.url_screenshot = "../%s%s.png" % (path, ss_name)
                else:
                    self.suite.url_screenshot = "%sartifact/%s/robot/%s%s.png"\
                                                % (self.suite.url_build,
                                                   self.suite.repository, path, ss_name)
                BuiltIn().log_to_console("*** INFO: Screen Shot"
                                         " Successful: %s ***" % ss_name)
            except:  # pylint: disable=bare-except
                BuiltIn().log_to_console("*** ERROR: Occurred while Screen Capture ***")
        self._update_suite_tools(self.test.tool)

    def get_end_suite_data(self, *args):
        """A method to get end suite data"""
        attrs = args[0][1]
        self.suite.time["end"] = tools.time_ms(attrs["endtime"], RF_TIME_PATTERN)
        self.suite.avgResponseTime = tools.get_var_value("avg_latency")
        self.suite.maxResponseTime = tools.get_var_value("max_latency")
        self.suite.location = tools.get_var_value("LOCATION")
        self.suite.url_path = self.test.url_path
        self.suite.result = attrs["status"]
        if attrs["doc"]:
            self.suite.description = attrs["doc"]
        else:
            self.suite.description = tools.get_var_value("DESCRIPTION") \
                if tools.get_var_value("DESCRIPTION") else ""

    def _update_suite_failed_reason(self, failed_reason, tc_name):
        """Method adds failed test case name + failedReason to the list of failed tests."""
        failed = tools.prepare_string_for_json(tc_name + " - " + failed_reason)
        if failed not in self.suite.failed_tests:
            self.suite.failed_tests.append(failed)

    def _update_suite_tools(self, tool):
        """Method adds a tool to the set of suite tools."""
        if tool not in self.suite.tools_list:
            self.suite.tools_list.append(tool)

    def print_details(self):
        """Print self details."""
        print(("self.suite: %s" % self.suite.__dict__))
        print(("self.test: %s" % self.test.__dict__))
        print(("self.conf: %s" % self.conf))


class TestData(object):
    """A class to store common properties for TestSuiteData and TestCaseData classes"""

    def __init__(self):
        self.time = {"start": None, "end": None}


class TestSuiteData(TestData):
    """A class to prepare requests to send test suite results to ElasticSearch."""

    def __init__(self, id_suite, run_id, name):
        super(TestSuiteData, self).__init__()
        self.test_run_id = run_id
        self.tools_list = []  # list of unique tools used by tests
        BuiltIn().log_to_console("Test Case name: %s" % str(name))
        self.original_ts_name = name \
            .replace("Robot.", "") \
            .replace("Sprints.", "") \
            .replace("Tests.", "")
        self.ts_name = name \
            .replace("Robot.", "") \
            .replace("Sprints.", "") \
            .replace(" ", "_") \
            .replace("Tests.", "") \
            .replace("Regression.", "") \
            .upper()
        if "CTO_SR" in self.ts_name:
            self.ts_name = self.ts_name.split('.', 1)[-1]
        self.feature = None
        self.track = None
        self.jira = []
        self.cpe = {"id": None, "version": None}
        self.failed_reason = ""
        self.failed_tests = []
        self.ts_tags = []
        self.avgResponseTime = ""
        self.maxResponseTime = ""
        self.url_path = ""
        self.location = ""
        self.id_pipeline = ""
        self.id_job = ""
        self.id_suite = id_suite
        self.id_user = ""
        self.id_testrun = self.test_run_id
        self.id_build = ""
        self.id_commit = ""
        self.id_branch = ""
        self.url_build = ""
        self.url_output = ""
        self.url_log = ""
        self.url_report = ""
        self.url_screenshot = ""
        self.failed_reason_robot = ""
        self.test_step_list = []
        self.stb_pool = ""
        # pabot is a boolean
        self.pabot = False
        self.result = ""
        self.description = ""
        self.result_json_file = None
        self.url_full_log = ""
        self.lab = ""
        self.jira_data_status = ""
        self.jira_data_priority = ""
        self.jira_data_linked_list = []
        self.jira_data_linked = []
        self.url_quickreport = ""
        self.repository = "e2e_si_automation"
        self.environment = ""
        self.tenant = ""
        self.jira_data_all_linked = {}
        self.jiragetter = JiraGetter()


class TestCaseData(TestData):
    """A class to prepare requests to send test case result to ElasticSearch."""

    def __init__(self, suite_obj, name, tags):
        super(TestCaseData, self).__init__()
        self.suite_obj = suite_obj
        self.tc_name = name
        self.tool = None
        self.failed_reason = None
        self.failed_reason_robot = ""
        self.suite_obj.cpe["id"] = tools.get_var_value("CPE_ID")
        self.tc_tags = list(tags)
        self.avgResponseTime = ""
        self.maxResponseTime = ""
        self.url_path = ""
        self.location = ""
        for tag in tags:
            if "JIRA" in tag:
                jira_ticket = tag.replace("JIRA_", "")
                if jira_ticket not in self.suite_obj.jira:
                    self.suite_obj.jira.append(jira_ticket)
                self.tc_tags.remove(tag)
            elif "FEATURE" in tag:
                self.suite_obj.feature = tag.replace("FEATURE_", "")
                self.tc_tags.remove(tag)
            elif "TOOL" in tag:
                if self.tool:
                    self.tool += ",%s" % (str(tag.replace("TOOL_", "")))
                else:
                    self.tool = tag.replace("TOOL_", "")
                self.tc_tags.remove(tag)
            elif "TRACK" in tag:
                self.suite_obj.track = tag.replace("TRACK_", "")
                self.tc_tags.remove(tag)
        self.description = ""
        self.result = ""
        self.result_json_file = None
